package org.wikipedia.myTest;

import static androidx.test.espresso.Espresso.onView;
import static androidx.test.espresso.Espresso.pressBack;
import static androidx.test.espresso.action.ViewActions.click;
import static androidx.test.espresso.action.ViewActions.closeSoftKeyboard;
import static androidx.test.espresso.action.ViewActions.replaceText;
import static androidx.test.espresso.action.ViewActions.swipeUp;
import static androidx.test.espresso.assertion.ViewAssertions.matches;
import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;
import static androidx.test.espresso.matcher.ViewMatchers.isRoot;
import static androidx.test.espresso.matcher.ViewMatchers.withId;
import static androidx.test.espresso.matcher.ViewMatchers.withText;
import static org.hamcrest.Matchers.allOf;

import android.app.Activity;
import android.app.Application;
import android.view.View;

import androidx.test.espresso.PerformException;
import androidx.test.espresso.UiController;
import androidx.test.espresso.ViewAction;
import androidx.test.espresso.util.HumanReadables;
import androidx.test.espresso.util.TreeIterables;
import androidx.test.ext.junit.rules.ActivityScenarioRule;
import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.filters.LargeTest;
import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.rule.ActivityTestRule;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject;
import androidx.test.uiautomator.UiObjectNotFoundException;
import androidx.test.uiautomator.UiSelector;

import org.hamcrest.Matcher;
import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.wikipedia.R;
import org.wikipedia.feed.news.NewsActivity;
import org.wikipedia.login.LoginActivity;
import org.wikipedia.main.MainActivity;

import java.util.concurrent.TimeoutException;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
@RunWith(AndroidJUnit4.class)
@LargeTest
public class AndroidTesting{

        private UiDevice mUiDevice;
        private UiDevice mUiDevice2;
    public static ViewAction waitId(final int viewId, final long millis) {
        return new ViewAction() {
            @Override
            public Matcher<View> getConstraints() {
                return isRoot();
            }

            @Override
            public String getDescription() {
                return "wait for a specific view with id <" + viewId + "> during " + millis + " millis.";
            }

            @Override
            public void perform(final UiController uiController, final View view) {
                uiController.loopMainThreadUntilIdle();
                final long startTime = System.currentTimeMillis();
                final long endTime = startTime + millis;
                final Matcher<View> viewMatcher = withId(viewId);

                do {
                    for (View child : TreeIterables.breadthFirstViewTraversal(view)) {
                        // found view with required ID
                        if (viewMatcher.matches(child)) {
                            return;
                        }
                    }

                    uiController.loopMainThreadForAtLeast(50);
                }
                while (System.currentTimeMillis() < endTime);

                // timeout happens
                throw new PerformException.Builder()
                        .withActionDescription(this.getDescription())
                        .withViewDescription(HumanReadables.describe(view))
                        .withCause(new TimeoutException())
                        .build();
            }
        };
    }

        @Rule
        public final ActivityTestRule<MainActivity> activityRule = new ActivityTestRule<>(MainActivity.class);

        @Before
        public void initValidString() {
// Specify a valid string.
            mUiDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
            mUiDevice2 = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
            String stringToBetyped = "Espresso";
        }

    @Test
    public void aFind() throws InterruptedException {
//            if (activityRule.getActivity().getClass().getSimpleName().equals("MainActivity")){
        onView(withId(R.id.fragment_onboarding_skip_button))
                .perform(click());


// Click the Search box
        onView(allOf(withId(R.id.search_container), isDisplayed()))
                .perform(click());

// Type in our search term
        onView(allOf(withId(R.id.search_src_text), isDisplayed()))
                .perform(replaceText("Bret Peet"), closeSoftKeyboard());

        Thread.sleep(1000);

        onView(allOf(withId(R.id.page_list_item_title), withText("Identity (2003 film)"), isDisplayed()))
                .check(matches(withText("Identity (2003 film)")));
        pressBack();
//            }
    }
    @Test
    public void bLogin() throws InterruptedException, UiObjectNotFoundException {


        onView(withId(R.id.fragment_onboarding_skip_button))
                .perform(click());
        onView(withId(R.id.menu_icon))
                .perform(click());
        onView(withId(R.id.main_drawer_login_button))
                .perform(click());

        onView(withId(R.id.create_account_login_button))
                .perform(click());

            onView(withId(R.id.login_username_text))
                    .perform(click());
//Проверяем находимся мы на активити для входа
        if (LoginActivity.getActive()) {
            UiObject mText = mUiDevice.findObject(new UiSelector().text("FullDangenMaster"));
            mText.click();

        onView(withId(R.id.login_button))
                .perform(click());
        Thread.sleep(4000);

        }

    }

    @Test
    public void cMovaApp() throws UiObjectNotFoundException, InterruptedException {
        onView(withId(R.id.fragment_onboarding_skip_button))
                .perform(click());

        UiObject mText0 = mUiDevice2.findObject(new UiSelector().text("Edits"));
        mText0.click();

        UiObject mText2 = mUiDevice2.findObject(new UiSelector().text("GOT IT"));
        mText2.click();
        mText2.click();
        mText2.click();
        mText2.click();


        UiObject mText3 = mUiDevice2.findObject(new UiSelector().text("Article descriptions"));
        mText3.click();
        Thread.sleep(3000);

        onView(withId(R.id.addContributionButton))
                .perform(click());

        onView(withId(R.id.view_description_edit_text))
                .perform(replaceText("Nice article"));

        onView(withId(R.id.view_description_edit_save_button))
                .perform(click());

        onView(withId(R.id.view_description_edit_save_button))
                .perform(click());

        onView(withId(R.id.view_description_edit_cancel_button))
                .perform(click());

    }

    @Test
    public void dExitAccaunt() throws  UiObjectNotFoundException {
        onView(withId(R.id.fragment_onboarding_skip_button))
                .perform(click());

        onView(withId(R.id.menu_icon))
                .perform(click());

        onView(withId(R.id.main_drawer_settings_container))
                .perform(click());


        onView(allOf(withId(R.id.recycler_view)))
                .perform(swipeUp());

        onView(withText("Log out")).perform(click());
        onView(withText("Log out")).perform(click());

    }
}
